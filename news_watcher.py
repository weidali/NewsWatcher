import sys
import time
import tracemalloc
from app import fetcher, analyzer, notifier, storage, config, logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log = logger.setup_logger()

def compare_and_alert(today_counts, yesterday_counts):
    for word, today_count in today_counts.items():
        yesterday_count = yesterday_counts.get(word, 0)
        
        if yesterday_count == 0:
            continue

        growth = ((today_count - yesterday_count) / yesterday_count) * 100

        if growth > config.GROWTH_THRESHOLD:
            r_word = config.KEYWORDS_MAPPING.get(word, word)
            message = f"üö® –í—Å–ø–ª–µ—Å–∫ —Ç–µ–º—ã: '{r_word}' –≤—ã—Ä–æ—Å –Ω–∞ {growth:.1f}%!"
            print(message)
            notifier.send_telegram_message(message)

def main():
    print("üöÄ –°—Ç–∞—Ä—Ç –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π...")
    log.info("üöÄ –ó–∞–ø—É—Å–∫ News Watcher...")

    start_time = time.time()  # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è
    tracemalloc.start()       # –°—Ç–∞—Ä—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏

    try:
        text = fetcher.fetch_news()
        today_counts = analyzer.analyze_text(text)
        yesterday_counts = storage.load_yesterday_counts()

        print("\nüìä –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ç–µ–º:")
        for word, count in today_counts.items():
            r_word = config.KEYWORDS_MAPPING.get(word, word)
            print(f"{r_word}: {count}")
            log.info(f"{r_word}: {count}")

        compare_and_alert(today_counts, yesterday_counts)
        storage.save_today_counts(today_counts)

        print("\n‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ.")
        log.info("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ.")
    except Exception as e:
        log.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)
    
    finally:
        # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
        end_time = time.time()
        total_time = end_time - start_time

        current, peak = tracemalloc.get_traced_memory()
        tracemalloc.stop()

        print(f"\n‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {total_time:.2f} —Å–µ–∫—É–Ω–¥, –ø–∏–∫ –ø–∞–º—è—Ç–∏: {peak / 1024:.2f} KB.")
        log.info(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {total_time:.2f} —Å–µ–∫—É–Ω–¥, –ø–∏–∫ –ø–∞–º—è—Ç–∏: {peak / 1024:.2f} KB.")

if __name__ == "__main__":
    main()
