import feedparser
from collections import Counter
from telegram import Bot
import json
import os
import logging
import sys
from app import parser, analyzer

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ logs/
os.makedirs('logs', exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename='logs/app.log',
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

# RSS-–ª–µ–Ω—Ç—ã –Ω–æ–≤–æ—Å—Ç–µ–π (–º–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω—è—Ç—å)
RSS_FEEDS = [
    "https://news.google.com/rss?hl=en",
    "https://www.reutersagency.com/feed/?best-sectors=political-general&post_type=best"
]

# –ö–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
KEYWORDS = [
    'crisis', 'inflation', 'war', 'conflict', 'cyberattack', 'pandemic',
    'climate', 'bitcoin', 'cryptocurrency', 'banking', 'recession'
]

# Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = '–¢–í–û–ô_BOT_TOKEN'
CHAT_ID = '–¢–í–û–ô_CHAT_ID'

# –ü–æ—Ä–æ–≥ —Ä–æ—Å—Ç–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π —Ç–µ–º—ã (%) –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞
GROWTH_THRESHOLD = 30

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—á–µ—Ä–∞—à–Ω–∏—Ö –ø–æ–¥—Å—á–µ—Ç–æ–≤
YESTERDAY_FILE = "yesterday_counts.json"

# --- –§—É–Ω–∫—Ü–∏–∏ ---

def send_telegram_message(message):
    bot = Bot(token=BOT_TOKEN)
    bot.send_message(chat_id=CHAT_ID, text=message)

def fetch_news():
    all_text = ""
    for url in RSS_FEEDS:
        feed = feedparser.parse(url)
        for entry in feed.entries:
            all_text += " " + entry.title + " " + entry.description
    return all_text.lower()

def analyze_text(text):
    word_counts = Counter()
    for keyword in KEYWORDS:
        word_counts[keyword] = text.count(keyword.lower())
    return word_counts

def load_yesterday_counts():
    if os.path.exists(YESTERDAY_FILE):
        with open(YESTERDAY_FILE, "r") as f:
            return json.load(f)
    return {}

def save_today_counts(counts):
    with open(YESTERDAY_FILE, "w") as f:
        json.dump(counts, f)

def compare_and_alert(today_counts, yesterday_counts):
    for word, today_count in today_counts.items():
        yesterday_count = yesterday_counts.get(word, 0)
        
        if yesterday_count == 0:
            continue

        growth = ((today_count - yesterday_count) / yesterday_count) * 100

        if growth > GROWTH_THRESHOLD:
            message = f"üö® –í—Å–ø–ª–µ—Å–∫ —Ç–µ–º—ã: '{word}' –≤—ã—Ä–æ—Å –Ω–∞ {growth:.1f}% –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å–æ –≤—á–µ—Ä–∞—à–Ω–∏–º –¥–Ω–µ–º!"
            print(message)
            send_telegram_message(message)

# --- –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å ---

def main():
    print("üöÄ –°—Ç–∞—Ä—Ç –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π...")
    logging.info("üöÄ –ó–∞–ø—É—Å–∫ News Watcher...")
    
    text = fetch_news()
    today_counts = analyze_text(text)
    yesterday_counts = load_yesterday_counts()

    print("\nüìä –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ç–µ–º:")
    for word, count in today_counts.items():
        print(f"{word}: {count}")

    compare_and_alert(today_counts, yesterday_counts)
    save_today_counts(today_counts)

    print("\n‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ.")

if __name__ == "__main__":
    main()
